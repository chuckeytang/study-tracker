generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  avartarPicUrl   String?          // 用户头像，可选
  email           String           @unique
  role            Role             // 使用枚举类型来定义用户角色
  skillPt         Int?            // 学生的技能点
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  progress        CourseProgress[] // 学生的学习进度
  selectedCourses UserCourse[]    // 学生选择的或者老师教授的课程列表
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  iconUrl         String?          // 课程图标的存储地址，可选字段
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  nodes           Node[]       // 课程下的所有 nodes
  enrolledUsers   UserCourse[] // 选择了该课程的学生，或者上该课程的老师
}

model Node {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  nodeType         NodeType         // 节点类型：bigcheck、majornode、minornode
  courseId         Int
  course           Course           @relation(fields: [courseId], references: [id])
  maxLevel         Int              // 最大等级
  iconUrl          String?

  // 解锁和锁住依赖节点的数量字段放在 Node 表中
  unlockDepNodeCount Int?            // 解锁依赖的节点中需要解锁的最小节点数，若为-1或者null则所有依赖节点都需解锁
  lockDepNodeCount   Int?            // 锁住依赖的节点中需要解锁的最小节点数，若为-1则所有依赖节点都需解锁才能实现该节点锁住

  // 解锁依赖节点作为根节点，所代表的cluster整体中，增加的技能点数总合。即技能点数总合添加达到该值，本节点可解锁
  unlockDepClusterTotalSkillPt  Int?

  unlockDependenciesFrom UnlockDependency[] @relation("UnlockFrom")
  unlockDependenciesTo   UnlockDependency[] @relation("UnlockTo")

  lockDependenciesFrom   LockDependency[]   @relation("LockFrom")
  lockDependenciesTo     LockDependency[]   @relation("LockTo")

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model UnlockDependency {
  id               Int              @id @default(autoincrement())
  fromNodeId       Int
  fromNode         Node             @relation("UnlockFrom", fields: [fromNodeId], references: [id])
  toNodeId         Int
  toNode           Node             @relation("UnlockTo", fields: [toNodeId], references: [id])
}

model LockDependency {
  id               Int              @id @default(autoincrement())
  fromNodeId       Int
  fromNode         Node             @relation("LockFrom", fields: [fromNodeId], references: [id])
  toNodeId         Int
  toNode           Node             @relation("LockTo", fields: [toNodeId], references: [id])
}

enum NodeType {
  BIGCHECK
  MAJOR_NODE
  MINOR_NODE
}

// 学生进度表：记录每个学生的课程节点解锁进度
model CourseProgress {
  id              Int      @id @default(autoincrement())
  userId          Int      // 学生 ID
  user            User     @relation(fields: [userId], references: [id])
  courseId        Int      // 所属课程
  nodeId          Int      // 所属节点
  level           Int      // 学习的等级
  unlocked        Boolean  // 是否解锁
  clusterSkillPt  Int      // bigcheck所代表的cluster的全部已加skill pt
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, nodeId])  // 添加复合唯一约束
}

model UserCourse {
  id         Int      @id @default(autoincrement())
  userId     Int      // 学生 ID
  user       User     @relation(fields: [userId], references: [id])
  courseId   Int      // 课程 ID
  course     Course   @relation(fields: [courseId], references: [id])
  createdAt  DateTime @default(now()) // 学生选择课程的时间
}