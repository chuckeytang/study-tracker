generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String?
  password        String?
  avartarPicUrl   String?          // 用户头像，可选
  email           String?           @unique
  role            Role             // 使用枚举类型来定义用户角色
  isTemporary     Boolean          @default(false) // 标记是否为临时用户
  skillPt         Int?             // 学生的技能点
  experience      Int              @default(0) // 用户的经验值
  experienceLevel Int              @default(1) // 用户的经验等级
  rewardPoints    Int              @default(0) // 用户的奖励点数
  rewardLevel     Int              @default(1) // 用户的奖励等级
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  progress        CourseProgress[] // 学生的学习进度
  selectedCourses UserCourse[]     // 学生选择的或者老师教授的课程列表

  NodeUpgradeHistory NodeUpgradeHistory[]
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  iconUrl         String?          // 课程图标的存储地址，可选字段
  published       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  nodes           Node[]       // 课程下的所有 nodes
  enrolledUsers   UserCourse[] // 选择了该课程的学生，或者上该课程的老师
}

model Node {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  nodeType         NodeType         // 节点类型：bigcheck、majornode、minornode
  courseId         Int
  course           Course           @relation(fields: [courseId], references: [id])
  maxLevel         Int              // 最大等级
  iconUrl          String?

  unlockType                   UnlockType       // 节点的解锁方式
  unlockDepTimeInterval        Int?             // 时间解锁方式下的时间跨度配置，单位秒

  // 解锁和锁住依赖节点的数量字段放在 Node 表中
  unlockDepNodeCount Int?            // 解锁依赖的节点中需要解锁的最小节点数，若为-1或者null则所有依赖节点都需解锁
  lockDepNodeCount   Int?            // 锁住依赖的节点中需要解锁的最小节点数，若为-1则所有依赖节点都需解锁才能实现该节点锁住
  coolDown           Int?            // 冷却时间，单位秒

  positionX                 Float          @default(-1)  // 新增位置X字段
  positionY                 Float          @default(-1)  // 新增位置Y字段

  // 解锁依赖节点作为根节点，所代表的cluster整体中，增加的技能点数总合。即技能点数总合添加达到该值，本节点可解锁
  unlockDepClusterTotalSkillPt  Int?

  unlockDependenciesFrom UnlockDependency[] @relation("UnlockFrom")   //指向更深层级的node
  unlockDependenciesTo   UnlockDependency[] @relation("UnlockTo")     //指向更高层级的node

  lockDependenciesFrom   LockDependency[]   @relation("LockFrom")
  lockDependenciesTo     LockDependency[]   @relation("LockTo")

  exp                          Int              // 每次升级提供的经验值点数
  rewardPt                     Float            // 每次升级提供的奖励币数量

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  NodeUpgradeHistory NodeUpgradeHistory[]
}

enum UnlockType {
  SKILL_POINT               // 传统技能点解锁
  TIME_BASED                // 时间解锁
  CLUSTER_TOTAL_SKILL_POINT // 集群总技能点数解锁
}

model UnlockDependency {
  id               Int              @id @default(autoincrement())
  fromNodeId       Int
  fromNode         Node             @relation("UnlockFrom", fields: [fromNodeId], references: [id])
  toNodeId         Int
  toNode           Node             @relation("UnlockTo", fields: [toNodeId], references: [id])
}

model LockDependency {
  id               Int              @id @default(autoincrement())
  fromNodeId       Int
  fromNode         Node             @relation("LockFrom", fields: [fromNodeId], references: [id])
  toNodeId         Int
  toNode           Node             @relation("LockTo", fields: [toNodeId], references: [id])
}

enum NodeType {
  BIGCHECK
  MAJOR_NODE
  MINOR_NODE
}

// 学生进度表：记录每个学生的课程节点解锁进度
model CourseProgress {
  id              Int      @id @default(autoincrement())
  userId          Int      // 学生 ID
  user            User     @relation(fields: [userId], references: [id])
  courseId        Int      // 所属课程
  nodeId          Int      // 所属节点
  level           Int      // 学习的等级
  unlocked        Boolean  // 是否解锁
  clusterSkillPt  Int      // bigcheck所代表的cluster的全部已加skill pt
  lastUpgradeTime DateTime? // 最近一次升级的时间
  unlockStartTime DateTime? // 开始倒计时解锁时间
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, nodeId])  // 添加复合唯一约束
}

model UserCourse {
  id         Int      @id @default(autoincrement())
  userId     Int      // 学生 ID
  user       User     @relation(fields: [userId], references: [id])
  courseId   Int      // 课程 ID
  course     Course   @relation(fields: [courseId], references: [id])
  createdAt  DateTime @default(now()) // 学生选择课程的时间
}

model ExperienceConfig {
  id        Int    @id @default(autoincrement())
  level     Int    @unique
  expPoints Int
}

model RewardConfig {
  id         Int    @id @default(autoincrement())
  level      Int    @unique
  rewardPoints Int
}

model NodeUpgradeHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  nodeId    Int
  level     Int
  user      User     @relation(fields: [userId], references: [id])
  node      Node     @relation(fields: [nodeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, nodeId, level]) // Ensure a user can only have one record per node level
}